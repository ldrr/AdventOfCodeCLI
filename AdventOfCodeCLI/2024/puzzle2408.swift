//
//  puzzle2408.swift
//  AdventOfCodeCLI
//
//  Created by Christoph Lederer on 08.12.24.
//

import Foundation

func puzzle2408() {

    var grid: [[Node]]!

    struct Pos: CustomStringConvertible {
        let x, y: Int

        var description: String {
            "(\(x),\(y)"
        }
    }

    struct Node {
        let char: Character
        var antinode = false
        let isEmpty: Bool

        init(char: Character, antinode: Bool = false) {
            self.char = char
            self.antinode = antinode
            self.isEmpty = self.char == "."
        }

        var description: String {
            if self.antinode {
                return "#"
            }
            return String(self.char)
        }
    }

    func part1(data: String, continues: Bool) -> Int {
        grid = data.components(separatedBy: "\n").map { $0.map { Node(char: $0) }}

        for y in 0..<grid.count {
            for x in 0..<grid[0].count {
                let node = grid[y][x]
                if !node.isEmpty, let otherNodes = findPartners(of: node, x: x, y: y) {
                    for node in otherNodes {
                        var distance = Pos(x: node.x - x, y: node.y - y)
                        let originalDistance = distance
                        var created = false
                        repeat {
                            created = false
                            var x1 = 0, x2 = 0, y1 = 0, y2 = 0

                            x1 = node.x + distance.x
                            x2 = x - distance.x
                            if distance.y > 0 {
                                y1 = node.y + distance.y
                                y2 = y - distance.y
                            } else {
                                y1 = y - distance.y
                                y2 = node.y + distance.y
                            }

                            let pos1 = Pos(x: x1, y: y1)
                            let pos2 = Pos(x: x2, y: y2)

                            for newPos in [pos1, pos2] {
                                if newPos.x < 0 || newPos.y < 0 || grid.count <= newPos.y || grid[0].count <= newPos.x {
                                    continue
                                }
                                grid[newPos.y][newPos.x].antinode = true

                                created = true
                            }
                            distance = Pos(x: distance.x + originalDistance.x, y: distance.y + originalDistance.y)
                        } while(created && continues)
                    }
                }
            }
        }
        return countAntinodes(withAntennas: continues)
    }

    func findPartners(of node: Node, x startX: Int, y startY: Int) -> [Pos]? {
        var partners: [Pos] = []
        for y in startY..<grid.count {
            for x in 0..<grid[0].count {
                if y == startY, x <= startX {
                    continue
                }
                if grid[y][x].isEmpty {
                    continue
                }
                if grid[y][x].char == node.char {
                    partners.append(Pos(x: x, y: y))
                }
            }
        }
        return partners.count > 0 ? partners : nil
    }

    func countAntinodes(withAntennas: Bool) -> Int {
        return grid.reduce(0) { partialResult, row in
            partialResult + row.reduce(0, { partialResult, node in
                partialResult + (node.antinode || (withAntennas && !node.isEmpty) ? 1 : 0)
            })
        }
    }

    func printGrid() {
        let arrayAsString = grid.map { row in
            row.map { $0.description }.joined()
        }.joined(separator: "\n")
        print(arrayAsString)
    }

    print(part1(data: input2, continues: true))
    // printGrid()

}

private let input0 = """
T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........
"""

private let input1 = """
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
"""

private let input2 = """
.............4....O..........w....R...............
.................................f................
..............4...j......NW0......................
....................R..W..........................
...............R..................................
..................................................
v.......................f.......0W................
.....9L............l...N.........w................
....L....9.......ON........8......................
.1.........49L........f..0..N.....................
..........................V...l...................
..........4.......................................
.....................j...................3.....U..
....O.....U.......................................
........J......................l..................
.O....s.Q.......j.....l.....w..........F...q......
..................................................
.U.......................j..8.....................
................U...............................3.
2.............................J............3......
..............................F...................
.....s...R...........J..................F.........
.s......................x..........F.....q........
.......2.....Q........3........x..................
...........v......................u...............
..............v...........n......8............q...
.......f..................8........i..............
.5..................1n..............P.....i.......
............7............Q..................X.....
......5...p....................V..................
.................J..........nx............q.......
.......p............W...........................0.
......2.............p.5.....1....P................
......I.................7.X....i...P..............
............s.....r...w................V..........
...............or...6.................V...........
............................PS.7..................
..........o...........................S...........
...........5..............o..1.......n............
...........I.........r.......7.......6............
.................o.r...........X..................
................................x.........u.......
.........p..Q....2................................
.........v.................S.....................u
I...........................S.....6...............
..................................................
.......I..........................................
..................................................
.......................................6..........
.................................X................
"""
